// Yedoh Kang
// APCS2 pd1
// HW14 -- So So Fast
// 2017-03-08

/*====
General Description to find the y-th smallest element:
Use the partition function to separate the array by upper and lower.
Compare the y value and the pivot position. If the value at the pivot position is equal to y, then turn that value at that index.
If the value of y is smaller than the pivor point, recurse, but using the partition function on only the lower bound of the array. 
If the value of y is larger than the pivot point, recurse, but using the partition function on only the upper bound of the array.

 */

public class FastSelect {

    private static int[] arr = {8, 21, 17, 69, 343};

    public static int partition (int left, int right, int pivotPos) {

	int pivot = arr[pivotPos];
	arr[pivotPos] = arr[right];
	arr[right] = pivot;

	int finalRest = left;
	for (int i = 0; i < right - 1; i++){
	    if (arr[i] < pivot) {
		int x = arr[finalRest];
		arr[finalRest] = arr[i];
		arr[i] = x;
		finalRest += 1;
	    }
	}
	int y = arr[right];
	arr[right] = arr[finalRest];
	arr[finalRest] = y;
	
	return finalRest;
	
    }

    public static int yTh (int left, int right, int y) {

	int pos = partition(left,right,y);

	    if (y-1 == pos-left) {
		return arr[pos];
	    }

	    if (pos < y) {
		return yTh (pos + 1, right, y-pos+left);
	    }

	    return yTh (left, pos -1, y);

    }


    public static void main (String[] args) {

	System.out.println(yTh(0, arr.length-1, 1)); // 8
	System.out.println(yTh(0, arr.length-1, 2)); // 17
        System.out.println(yTh(0, arr.length-1, 3)); // 21
	System.out.println(yTh(0, arr.length-1, 4)); // 69
        System.out.println(yTh(0, arr.length-1, 5)); // 343
	
    }
}
